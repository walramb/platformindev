// Generated by CoffeeScript 1.10.0
(function() {
  var Block, BugLady, Layer, Sprite, V2d, add, arrclone, arrsansval, bglayer, bindings, body, brickcanvas, brickctx, cachedimg, cacheflippedimg, canvas, ctx, flipimg, heldkeys, holdbindings, isholdingkey, keyholdbind, keytapbind, ladybug, loadimg, looptick, mainloop, memoize, preload, preloadcontainer, render, sourcebaseurl, sources, tickno, tickwaitms, tilebackground, tmpcanvas, tmpcanvasjq, tmpctx, vadd, vnmul, xmlatts, xmltag,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    slice = [].slice;

  canvas = $("<canvas>");

  body = $("body");

  xmlatts = function(atts) {
    var key, val;
    return ((function() {
      var results;
      results = [];
      for (key in atts) {
        if (!hasProp.call(atts, key)) continue;
        val = atts[key];
        results.push(" " + key + "=\"" + val + "\"");
      }
      return results;
    })()).join();
  };

  xmltag = function(type, atts, body) {
    if (type == null) {
      type = "div";
    }
    if (atts == null) {
      atts = {};
    }
    if (body == null) {
      body = "";
    }
    return "<" + type + (xmlatts(atts)) + ">" + body + "</" + type + ">";
  };

  V2d = (function() {
    function V2d(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
    }

    return V2d;

  })();

  add = function(a, b) {
    return a + b;
  };

  vadd = function(v, u) {
    return new V2d(add(v.x, u.x), add(v.y, u.y));
  };

  vnmul = function(v, n) {
    return new V2d(v.x * n, v.y * n);
  };

  Sprite = (function() {
    function Sprite() {
      this.vel = new V2d();
      this.pos = new V2d();
    }

    Sprite.prototype.tick = function() {
      return this.pos = vadd(this.pos, this.vel);
    };

    return Sprite;

  })();

  isholdingkey = function(key) {
    key = key.toUpperCase().charCodeAt(0);
    return indexOf.call(heldkeys, key) >= 0;
  };

  BugLady = (function(superClass) {
    extend(BugLady, superClass);

    function BugLady() {
      BugLady.__super__.constructor.apply(this, arguments);
      this.jumping = false;
    }

    BugLady.prototype.tick = function() {
      var lbw, width;
      this.jumping = isholdingkey('w');
      BugLady.__super__.tick.apply(this, arguments);
      if (this.touchingground()) {
        this.pos.y = 64 * 4;
        this.vel.y = 0;
        this.vel.x = this.vel.x / 2;
        if (Math.abs(this.vel.x) < 0.0001) {
          this.vel.x = 0;
        }
      }
      if (!this.touchingground()) {
        this.vel.y += 1;
      }
      if (this.touchingground() && this.jumping) {
        this.vel.y = -10;
      }
      lbw = 64;
      width = 640 + lbw;
      return this.pos.x = ((this.pos.x + (width + lbw)) % width) - lbw;
    };

    return BugLady;

  })(Sprite);

  BugLady.prototype.render = function(ctx) {
    var img, src, vel, walking;
    src = "lovelyshorter.png";
    vel = Math.abs(this.vel.x);
    walking = vel > 0.2;
    if (walking) {
      src = tickno % 12 > 6 ? 'lovelyrun1.png' : 'lovelyrun2.png';
    }
    if (!this.touchingground()) {
      src = 'lovelyjump.png';
    }
    if (!walking && isholdingkey('s')) {
      src = 'lovelycrouch.png';
    }
    img = this.facingleft ? cacheflippedimg(src) : cachedimg(src);
    return ctx.drawImage(img, this.pos.x, this.pos.y);
  };

  ladybug = new BugLady;

  ladybug.facingleft = false;

  ladybug.jumping = false;

  BugLady.prototype.touchingground = function() {
    return this.pos.y >= 64 * 4;
  };

  bindings = {};

  holdbindings = {};

  heldkeys = [];

  keytapbind = function(key, func) {
    var k;
    k = key.toUpperCase().charCodeAt(0);
    return bindings[k] = func;
  };

  keyholdbind = function(key, func) {
    var k;
    k = key.toUpperCase().charCodeAt(0);
    return holdbindings[k] = func;
  };

  arrclone = function(arr) {
    return arr.slice(0);
  };

  keyholdbind('w', function() {
    return ladybug.jumping = true;
  });

  keyholdbind('s', function() {});

  keyholdbind('a', function() {
    ladybug.facingleft = true;
    return ladybug.vel.x = -4;
  });

  keyholdbind('d', function() {
    ladybug.facingleft = false;
    return ladybug.vel.x = 4;
  });

  arrsansval = function(arr, val) {
    var i, newarr, ref;
    if (ref = !val, indexOf.call(arr, ref) >= 0) {
      return arr;
    }
    newarr = arrclone(arr);
    i = newarr.indexOf(val);
    if (i === -1) {
      return newarr;
    }
    newarr.splice(i, 1);
    return newarr;
  };

  $(document).bind('keydown', function(e) {
    var key;
    key = e.which;
    if (typeof bindings[key] === "function") {
      bindings[key]();
    }
    if (!(indexOf.call(heldkeys, key) >= 0)) {
      return heldkeys.push(key);
    }
  });

  $(document).bind('keyup', function(e) {
    var key;
    key = e.which;
    return heldkeys = arrsansval(heldkeys, key);
  });

  tmpcanvasjq = $("<canvas>");

  tmpcanvas = tmpcanvasjq[0];

  ladybug.pos = {
    x: 64,
    y: 100
  };

  ctx = canvas[0].getContext('2d');

  canvas.attr('height', 64 * 6);

  canvas.attr('width', 640);

  canvas.css('border', '1px solid black');

  tickno = 0;

  sourcebaseurl = "./sprites/";

  loadimg = function(src) {
    var img;
    img = new Image;
    img.src = sourcebaseurl + src;
    return img;
  };

  memoize = function(func) {
    var newfunc;
    newfunc = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!(args in newfunc._memos)) {
        newfunc._memos[args] = func.apply(this, args);
      }
      return newfunc._memos[args];
    };
    newfunc._memos = {};
    return newfunc;
  };

  cachedimg = memoize(loadimg);

  flipimg = function(src) {
    var img, newcanvas, newctx;
    img = cachedimg(src);
    newcanvas = $("<canvas>")[0];
    newcanvas.width = img.naturalWidth;
    newcanvas.height = img.naturalHeight;
    newctx = newcanvas.getContext('2d');
    newctx.scale(-1, 1);
    newctx.translate(-img.naturalWidth, 0);
    newctx.drawImage(img, 0, 0);
    return newcanvas;
  };

  cacheflippedimg = memoize(flipimg);

  sources = ['lovelyshorter.png', 'lovelycrouch.png', 'lovelyrun1.png', 'lovelyrun2.png', 'lovelyjump.png', 'cloud.png', 'lovelyfall.png'];

  sources.push('groundtile.png');

  preloadcontainer = $("<div>");

  preloadcontainer.hide();

  body.append(preloadcontainer);

  preload = function() {
    var img, j, len, results, src;
    results = [];
    for (j = 0, len = sources.length; j < len; j++) {
      src = sources[j];
      console.log("PRELOADING " + src);
      img = cachedimg(src);
      results.push(preloadcontainer.append(img));
    }
    return results;
  };

  preload();

  tilebackground = function(ctx, offset, src) {
    var ch, cw, horiznum, img, j, ref, results, vertnum;
    cw = canvas[0].width;
    ch = canvas[0].height;
    img = cachedimg(src);
    if (img.width === 0 || img.height === 0) {
      return;
    }
    horiznum = Math.floor(cw / img.width);
    vertnum = Math.floor(ch / img.height);
    return (function() {
      results = [];
      for (var j = -1, ref = horiznum + 1; -1 <= ref ? j < ref : j > ref; -1 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this).forEach(function(n) {
      var j, ref, results;
      return (function() {
        results = [];
        for (var j = -1, ref = vertnum + 1; -1 <= ref ? j <= ref : j >= ref; -1 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).forEach(function(m) {
        var finalx, finaly;
        finalx = n * img.width + (offset.x % img.width);
        finaly = m * img.height + (offset.y % img.height);
        return ctx.drawImage(img, finalx, finaly);
      });
    });
  };

  Block = (function() {
    function Block(x, y, w, h) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
    }

    Block.prototype.render = function(ctx) {
      ctx.beginPath();
      ctx.fillStyle = 'brown';
      return ctx.fillRect(this.x, this.y, this.w, this.h);
    };

    return Block;

  })();

  tmpcanvas.width = canvas[0].width;

  tmpcanvas.height = canvas[0].height;

  tmpctx = tmpcanvas.getContext('2d');

  bglayer = [];

  bglayer.push(new Block(0, 64 * 5 - 4, 640, 100));

  bglayer.push(new Block(64 * 4, 64 * 2, 32, 32));

  Layer = function() {
    var newlayer;
    newlayer = $("<canvas>");
    return newlayer[0];
  };

  brickcanvas = Layer();

  brickcanvas.width = canvas[0].width;

  brickcanvas.height = canvas[0].height;

  brickctx = brickcanvas.getContext('2d');

  render = function() {
    tilebackground(ctx, {
      x: tickno * -0.2,
      y: Math.sin(tickno / 200) * 64
    }, "cloud.png");
    tilebackground(brickctx, {
      x: 0,
      y: 0
    }, "groundtile.png");
    tmpctx.clearRect(0, 0, 640, 640);
    bglayer.forEach(function(sprite) {
      return typeof sprite.render === "function" ? sprite.render(tmpctx) : void 0;
    });
    tmpctx.globalCompositeOperation = "source-in";
    tmpctx.drawImage(brickcanvas, 0, 0);
    tmpctx.globalCompositeOperation = "source-over";
    ctx.drawImage(tmpcanvas, 0, 0);
    return ladybug.render(ctx);
  };

  looptick = function() {
    var j, key, len;
    for (j = 0, len = heldkeys.length; j < len; j++) {
      key = heldkeys[j];
      if (typeof holdbindings[key] === "function") {
        holdbindings[key]();
      }
    }
    ladybug.tick();
    tickno++;
    return render();
  };

  tickwaitms = 10;

  mainloop = function() {
    looptick();
    return setTimeout(mainloop, tickwaitms);
  };

  preloadcontainer.imagesLoaded('done', function() {
    var answer, c;
    body.append(canvas);
    ctx.fillStyle = "#008080";
    ctx.fillRect(0, 0, 640, 64);
    body.append("<br/><em>there's no crime to fight around here, use WASD to waste time by purposelessly wiggling around</em><br/>");
    body.append(xmltag('a', {
      target: '_blank',
      href: 'http://www.youtube.com/watch?v=NbVZPu_JM6I'
    }, "recommended soundtrack"));
    body.append(c = $(xmltag()));
    c.css('color', 'silver');
    c.append("<p>psst CAN YOU FIND THE SAUCY SUPER SECRET SAPPHIC SLOPPY SMOOCHING SCENE??</p>");
    c.append(answer = $("<em>(answer: no you can't, because it doesn't exist)</em>"));
    answer.css('transform', 'rotate(180deg)');
    answer.css({
      'display': 'inline-block'
    });
    return mainloop();
  });

}).call(this);

//# sourceMappingURL=platform.js.map
